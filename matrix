#! /bin/bash
trap "echo 'Signal received, exiting'; cleanUp; exit 0" INT HUP TERM

# filename:
# Author: Gerson Lindor Jr.  (lindorg@oregontate.edu)
# Date Created: January 13, 2020
# Last Modified: January 22, 2020


#@param: $1 - the name of the operations
#
operations() {
    local flag=0;
    local fileFlag=0
    local argsFlag=0
    # check argument count
    local opArgs=2  # the expected amount of arguments for dims, transpose, and mean operations
    # check if file is readable
    fileIsReadable
    fileFlag=$?
    if [ $1 = "add" -o $1 = "multiply" ]
    then
        opArgs=3  # the expected amount of arguments for add and multiply operations
    fi
    checkArgCount $opArgs $numOfArgs
    argFlag=$?
    if [ $fileFlag = 2 -a $argFlag = 0 ]
    then
        echo -e "Argument count is $numOfArgs but the file named by argument is not readable" 1>&2
        exit 1
    elif [ $argFlag = 1 ]
    then
        echo "Argument count is greater than 1" 1>&2
        exit 1
    fi
    if [ $1 = "dims" ]
    then
        dims
        flag=$?
        if [ "$flag" = 0 ]
        then
            showDims
        fi
    elif [ $1 = "transpose" ]
    then
        transpose
        flag=$?
    elif [ $1 = "mean" ]
    then
        mean
        flag=$?
    elif [ $1 = "add" ]
    then
        add "add"
        flag=$?
    elif [ $1 = "multiply" ]
    then
        multiply "multiply"
        flag=$?
    else
        echo "Error: Bad command" 1>&2
        exit 1
    fi
    removeAllTemp
    return $flag
}


#
fileIsReadable() {
    # Argument count cannot be 0
    # test if file exist and it's readable
    local checkSecondFile=0
    if [ -e "$datafilepath" ]
    then
        test -e $matrixB
        checkSecondFile=$?
        if [ "$checkSecondFile" = 1 -a "$numOfArgs" = 3 ]
        then
            echo -e "The file does not exist" 1>&2
            exit 1
        fi
        if [ -r $datafilepath ]  # test if the file is readable for mean, transpose, and dims
        then
            if [ "$numofArgs" = 2 ]
            then
                return 0
            fi
        elif [ ! -r "$datafilepath" -o ! -r "$matrixB" ]
        then
            return 2
        fi
    else
        echo -e "The file does not exist" 1>&2
        exit 1
    fi
    return 0
}


eitherFileISReadable() {
ls
    #change datafilepath to file in position $1
    #call fileIsReadable
    #change datafilepath to file in postion $1
    #call fileIsReadable
    # give error message  either file is not readable

}


#@params: $1 - expected argument count
#         $2 - actual script argument count
checkArgCount() {
    if [ $1 -lt $2 ]
    then
        return 1
    elif [ $numOfArgs = 0 ]
    then
        echo "Error: Operation has not arguments" 1>&2
        exit 1
    fi
    return 0
}


#
dims() {
    # get rows
    rows=$( cat $datafilepath | wc -l )
    # get columns
    local line=$( head -1 $datafilepath ) # grap the first line
    # count the number of elements in a line to find the number of columns
    for i in $line
    do
        cols=$(( cols + 1 ))
    done
    return 0
}


#
showDims() {
    # display matrix dimensions
    echo -e "$rows $cols"
}


#
transpose () {
    local index=1
    
    # get the dimensions of the matrix
    dims
    until [ "$index" -gt "$cols" ]
    do
        # turn column to a row
        local turnToRow="$( cut -f$index $datafilepath | tr '\n' '\t' )"
        # remove the extra tab character at the end
        turnToRow="${turnToRow%?}" 
        # if index equals to 1, then redirect the file
        if [ "$index" = 1 ]
        then
            echo -e "$turnToRow" > "$tempFileA"
        else
            # otherwise append to the same file
            echo -e "$turnToRow" >> "$tempFileA"
        fi
        # increment index
        index=$(( index + 1 ))
    done
    cat "$tempFileA"
}


removeAllTemp() {
    rm -f "$tempFileA"
    rm -f "$tempFileB"
    rm -f "$tempFileC"
    rm -f "$tempFileD"
    rm -f "$tempFileE"
    rm -f "$tempFileF"
}


cleanUp() {
    removeAllTemp
    rm -f datafile*
}


mean()  {
    local sum=0
    # call transpose to make it easier to read each line and calculate the sum
    transpose > "$tempFileD"
    while read line
    do
        # in a loop calculate the sum
        sum=0
        for i in $line
        do
            sum=$((i + sum))
        done
        # calculate the average and append result to a file
        local avg=$(( (sum + (rows/2)*( (sum>0)*2-1)) / rows ))
        echo -e "$avg" >> "$tempFileB"
     done < $tempFileD
     # change the file with mean values from columns to rows
     local hold=$( cat "$tempFileB" | tr '\n' '\t' )
     # trim off the tab character at the end of a line
     hold="${hold%?}"
     echo -e "$hold" > "$tempFileC"
     cat "$tempFileC"
     return 0
}


add() {
    local limit=0
    # verify dimensions
    checkDimensions $1
    limit=$(( $cols + 1 ))
    local index=1
    until [ "$index" = "$limit" ]
    do
        local tempPrev="tempNum$(( index - 1 ))"
        local tempCurrent="tempNum$index"
        # this will create unique temp file with numbers at the end
        if [ "$index" -lt 10 ]
        then
            tempCurrent="tempNum0$index"
        fi
        # take the columns of the two matrices and combine them to a new file
        mergeColumns $matrixB $datafilepath $index > $tempFileA
        # sum each row of the combined file
        sumOfRows $tempFileA > $tempFileB
        rm -f $tempFileD  # delete file for the next row
        # copy sum file to unique temp files
        index=$(( $index + 1 ))
        cat $tempFileB > $tempCurrent
    done
    # Display results
     paste tempNum* > $tempFileF 
     cat  $tempFileF
     rm -f tempNum*
}


#
# @params: $1 is the first matrix
#          $2 is the second matrix
#          $3 is the value of a index
mergeColumns() {
    local columnA
    local columnB

    # take column of first matrix
    cut -f$3 $1 > $tempFileA
    # take column of second matrix
    cut -f$3 $2 > $tempFileB
    # paste them together to another file
    paste $tempFileA $tempFileB > $tempFileC
    # cat new file to stdout
    cat $tempFileC
}


#
# @params: $1 is a matrix
sumOfRows() {
    local sum=0

    while read line
    do
        # in a loop calculate the sum
        sum=0
        for i in $line
        do
            sum=$((i + sum))
        done
        echo -e "$sum" >> $tempFileD
     done < $1
     cat $tempFileD
}




#
multiply() {
    local tempA="tempFA$$"
    local tempB="tempFB$$"
    local colIndex=1
    local fileCount=1

    #check dimensions
    checkDimensions $1
    # read first matrix
    while read aRow
    do
        local colIndex=1
        # get all the columns of the second matrix
        until [ "$colIndex" -gt "$cols" ]
        do
            # get the row of first matrix
            echo "$aRow" > $tempA
            # get each column of the second matrix
            cut -f$colIndex $datafilepath > $tempB
            sum=$( productAndSum $tempA $tempB )
            colIndex=$(( colIndex + 1 ))
            # set up numeric temp files
            if [ "$fileCount" -lt 10 ]
            then
                local file="file0$fileCount"
            else
                local file="file$fileCount"
            fi
            # append sum to a unique numeric temp file
            echo "$sum" >> $file
        done
        # change file from columns to rows
        local turnToRow=$( cat $file | tr '\n' '\t' )
        # remove extra tab at the end
         turnToRow="${turnToRow%?}"
        # copy row back to the same file
        echo "$turnToRow" > $file
        fileCount=$(( fileCount + 1 ))
    # end while loop < $matrixB -----
    done < $matrixB
    # concatenate all temp files to result
    cat file* > $tempFileC
    rm -f file* tempFA* tempFB*
    cat $tempFileC
    return 0
}


#
# @params: $1 - the row of the first matrix
#          $2 - column of the second matrix
productAndSum() {
    local sum=0
    local j=1
    local product=0
    local firstOperand=$(cat $tempA )

    # second matrix's column to rows
    cat $2 > $tempFileA
    local secondMatrix=$( cat $tempFileA | tr '\n' '\t' )
     secondMatrix="${secondMatrix%?}"
     echo "$secondMatrix" > $tempFileB
    # calculate the product and the sum
    for i in $firstOperand
    do
        local secondOperand=$( cut -f$j $tempFileB )
        product=$(( i * secondOperand ))
        sum=$(( sum + product ))
        j=$(( j + 1 ))
    done
    echo "$sum"
}


#
#@params: $1 holds the name of operations add or multiply
checkDimensions() {
    #check for matching dimennsions
    # get the dimensions of datafilepath
    dims
    local rowsOfA=$rows
    local colsOfA=$cols
    # swap values between variables
    swapMatrix
    # get the dimensions of datafilepath with the swapped matrix
    # reset dimensions
    rows=0
    cols=0
    dims
    local rowsOfB=$rows
    local colsOfB=$cols
    # check dimennsions for add or multiply operations
    if [ "$1" = "add" ]
    then
        if [ "$rowsOfA" != "$rowsOfB" -o "$colsOfA" != "$colsOfB" ]
        then
            echo -n "The dimensions of the input matrices do not allow them to be" 1>&2
            echo " added together following the rules of matrix addition" 1>&2
            exit 1
        fi
    elif [ "$1" = "multiply" ]
    then
        if [ "$colsOfA" != "$rowsOfB" ]
        then
            echo -n "The dimensions of the input matrices do not allow them to be" 1>&2
            echo " mutltiplied together following the rules of matrix multiplication" 1>&2
            exit 1
        fi
     fi
}


swapMatrix() {
    local temp=$datafilepath
    datafilepath=$matrixB
    matrixB=$temp
}


#### Run Script ####

datafilepath="datafile$$"
opsName="N/A"
rows=0
cols=0
numOfArgs="$#"
tempFileA="tempA$$"
tempFileB="tempB$$"
tempFileC="tempC$$"
tempFileD="tempD$$"
tempFileE="tempE$$"
tempFileF="tempF$$"
found=1
commandArg=$0


# checking that command is "matrix"
if [ "$commandArg" != "./matrix" ]
then
    echo "Error: Bad command" 1>&2
    exit 1
fi

# check that the operation is correct
if [ "$1" != "dims" -a "$1" != "transpose" -a "$1" != "mean" -a "$1" != "add" -a "$1" != "multiply" ]
then
    echo "Error: bad operations" 1>&2
    exit 1
fi

# check for correct number of argument for add and multiply operations
if [ "$numOfArgs" -le 2 ]
then
    if [ "$1" = "add" -o "$1" = "multiply" ]
    then
        echo -e "operations 'add' and 'multiply' must have 3 arguments" 1>&2
        exit 1
    fi
fi

# generate path of file via stdin or a file
if [ "$numOfArgs" = "1" ]
then
    cat > "$datafilepath"
elif [ "$numOfArgs" -ge "2" ]
then
    datafilepath=$2
    if [ "$numOfArgs" -ge "3" ]
    then
        matrixB=$3
    fi
fi

# run dims, transpose, mean, add, or multiply
operations $1 
rm -f datafile*
    


