#! /bin/bash

# filename:
# Author: Gerson Lindor Jr.  (lindorg@oregontate.edu)
# Date Created: January 13, 2020
# Last Modified: January 14, 2020

# Debugger mode
#set -x


#
scriptError() {
ls


}


#@param: $1 - the name of the operations
#
operations() {
    local flag=0;
    local fileFlag=0
    local argsFlag=0
    # check argument count
    local opArgs=2  # the expected amount of arguments for dims, transpose, and mean operations
    # check if file is readable
    fileIsReadable
    fileFlag=$?
    if [ $1 = "add" -o $1 = "multiply" ]
    then
        opArgs=3  # the expected amount of arguments for add and multiply operations
    fi
    checkArgCount $opArgs $numOfArgs
    argFlag=$?
    if [ $fileFlag = 2 -a $argFlag = 0 ]
    then
        echo -e "Argument count is $numOfArgs but the file named by argument is not readable" 1>&2
        exit 1
    elif [ $argFlag = 1 ]
    then
        echo "Argument count is greater than 1" 1>&2
        exit 1
    fi
    if [ $1 = "dims" ]
    then
        dims
        flag=$?
        if [ "$flag" = 0 ]
        then
            showDims
        fi
    elif [ $1 = "transpose" ]
    then
        transpose
        flag=$?
    fi
    removeAllTemp
    return $flag
}


#
fileIsReadable() {
    # test if file exist and it's readable
    local checkSecondFile=0
    if [ -e "$datafilepath" ]
    then
        test -e $matrixB
        checkSecondFile=$?
        if [ "$checkSecondFile" = 1 -a "$numOfArgs" = 3 ]
        then
            echo -e "The file does not exist" 1>&2
            exit 1
        fi
        if [ -r $datafilepath ]  # test if the file is readable for mean, transpose, and dims
        then
            if [ "$numofArgs" = 2 ]
            then
                return 0
            fi
        elif [ ! -r "$datafilepath" -o ! -r "$matrixB" ]
        then
            return 2
        fi
    else
        echo -e "The file does not exist" 1>&2
        exit 1
    fi
    return 0
}


eitherFileISReadable() {
ls
    #change datafilepath to file in position $1
    #call fileIsReadable
    #change datafilepath to file in postion $1
    #call fileIsReadable
    # give error message  either file is not readable

}


#@params: $1 - expected argument count
#         $2 - actual script argument count
checkArgCount() {
    if [ $1 -lt $2 ]
    then
        return 1
    elif [ $numOfArgs = 0 ]
    then
        echo "Error: Operation has not arguments" 1>&2
        exit 1
    fi
    return 0
}


# may not use this
stdinOps() {
ls

}


#  may not use this
otherOps() {
ls

}


#
dims() {
    # get rows
    rows=$( cat $datafilepath | wc -l )
    # get columns
    local line=$( head -1 $datafilepath ) # grap the first line
    # count the number of elements in a line to find the number of columns
    for i in $line
    do
        cols=$(( cols + 1 ))
    done
    return 0
}


#
showDims() {
    # display matrix dimensions
    echo -e "$rows $cols"
}


#
transpose () {
    local index=1
    
    # get the dimensions of the matrix
    dims
    until [ "$index" -gt "$cols" ]
    do
        # turn column to a row
        local turnToRow="$( cut -f$index $datafilepath | tr '\n' '\t' )"
        # remove the extra tab character at the end
        turnToRow="${turnToRow%?}" 
        # if index equals to 1, then redirect the file
        if [ "$index" = 1 ]
        then
            echo -e "$turnToRow" > "$tempFileA"
        else
            # otherwise append to the same file
            echo -e "$turnToRow" >> "$tempFileA"
        fi
        # increment index
        index=$(( index + 1 ))
    done
    cat "$tempFileA"
}


removeAllTemp() {
    rm -f "$tempFileA"
}



#### Running the Script ####

datafilepath="datafile$$"
opsName="N/A"
rows=0
cols=0
numOfArgs="$#"
tempFileA="tempA$$"


# Create temp files
touch "$tempFileA"


# generate path of file via stdin or a file
if [ "$numOfArgs" = "1" ]
then
    cat > "$datafilepath"
elif [ "$numOfArgs" -ge "2" ]
then
    datafilepath=$2
    if [ "$numOfArgs" -ge "3" ]
    then
        matrixB=$3
    fi
fi
# run dims, transpose, mean, add, or multiply
operations $1 
    


